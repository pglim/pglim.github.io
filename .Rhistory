set.seed(233)
lasso.model <- train(CompressiveStrength~., data=training, method="lasso")
plot.enet(lasso.model$finalModel, xvar="penalty", use.color=TRUE)
library(forecast)
library(quantmod)
library(lubridate)  # For year() function below
dat = read.csv("~/datasciencecoursera/Courses/PracticalMachineLearning/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
install.packages("quantmod")
install.packages("lubridate")
library(forecast)
library(quantmod)
library(lubridate)  # For year() function below
dat = read.csv("~/datasciencecoursera/Courses/PracticalMachineLearning/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
library(quantmod)
library(lubridate)  # For year() function below
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod <- bats(tstrain)
fcast <- forecast.bats(mod, level=95, h=nrow(testing))
acc <- accuracy(fcast, testing$visitsTumblr)
count <- 0
for (i in 1:nrow(testing)) {
if (testing$visitsTumblr[i] > fcast$lower[i]) {
if(testing$visitsTumblr[i] < fcast$upper[i]) {
count <- count + 1}
}
}
count/nrow(testing)
mod <- bats(tstrain)
fcast <- forecast.bats(mod, level=95, h=nrow(testing))
acc <- accuracy(fcast, testing$visitsTumblr)
count <- 0
for (i in 1:nrow(testing)) {
if (testing$visitsTumblr[i] > fcast$lower[i]) {
if(testing$visitsTumblr[i] < fcast$upper[i]) {
count <- count + 1}
}
}
count/nrow(testing)
fcast <- forecast.bats(mod, level=95, h=nrow(testing))
install.packages("forecasts")
install.packages("forecast")
fcast <- forecast.bats(mod, level=95, h=nrow(testing))
library(forecast)
library(quantmod)
library(lubridate)  # For year() function below
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
library(quantmod)
library(lubridate)  # For year() function below
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
library(quantmod)
library(lubridate)  # For year() function below
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod <- bats(tstrain)
fcast <- forecast.bats(mod, level=95, h=nrow(testing))
acc <- accuracy(fcast, testing$visitsTumblr)
count <- 0
for (i in 1:nrow(testing)) {
if (testing$visitsTumblr[i] > fcast$lower[i]) {
if(testing$visitsTumblr[i] < fcast$upper[i]) {
count <- count + 1}
}
}
count/nrow(testing)
install.packages("forecast")
install.packages("quantmod")
install.packages("lubridate")
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
library(quantmod)
library(lubridate)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod <- bats(tstrain)
fcast <- forecast.bats(mod, level=95, h=nrow(testing))
acc <- accuracy(fcast, testing$visitsTumblr)
count <- 0
for (i in 1:nrow(testing)) {
if (testing$visitsTumblr[i] > fcast$lower[i]) {
if(testing$visitsTumblr[i] < fcast$upper[i]) {
count <- count + 1}
}
}
count/nrow(testing)
library(forecast)
install.packages("forecast")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("AppliedPredictiveModeling")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
testing = concrete[-inTrain,]library(ca)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("caret")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("AppliedPredictiveModeling")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("ldamodel")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
createdatapartition
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,
e
w
er
re
w32
exit
quit
exit
quit
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
install.packages("manipulate")
library(manipulate)
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
install.packages("rcharts")
library(rcharts)
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
airquality
head(airquality)
dTable(airquality, sPaginationType = "full_numbers")
library(dtable)
install.packages("dtables")
library(dtable)
dTable(airquality, sPaginationType = "full_numbers")
library(dTable)
install.packages("crans")
dTable(airquality, sPaginationType = "full_numbers")
library(dTable)
install.packages("base64enc")
dTable(airquality, sPaginationType = "full_numbers")
library(dTable)
library(base64enc)
dTable(airquality, sPaginationType = "full_numbers")
library(dTable)
library(rCharts)
install.packages("rCharts")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("ramnathv/rCharts@dev")
install_github("ramnathv/rCharts@dev")
install.packages("RCurl")
install_github("ramnathv/rCharts@dev")
install_github("ramnathv/rCharts@dev")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("Rcpp")
library(devtools)
install_github("ramnathv/rCharts@dev")
dTable(airquality, sPaginationType = "full_numbers")
library(dTable)
dTable()
?dTable
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'), # Missing a comma in the sidebar panel
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
runExample("01_hello")
runApp("app1")
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
install.packages("shiny")
libray(shiny)
library(shiny)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
runExample("01_hello")
runApp("app1")
runExample("01_hello")
install.packages("DDPQuiz3")
library(DDPQuiz3)
Roxygen2
Roxygen2()
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
View(InsectSprays)
radius
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
values
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
install.packages("Slidify")
r presentation
R presentation
R Presentation
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('ramnathv/slidifyLibraries', 'ramnathv')
install_github('ramnathv/slidifyLibraries', 'ramnathv')
library(devtools)
install_github('slidifyLibraries', 'ramnathv')
install_github('ramnathv/slidifyLibraries', 'ramnathv')
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify', 'ramnathv')
install_github('ramnathv/slidify', 'ramnathv')
require(devtools)
install_github("slidify", "ramnathv")
install_github("ramnathv/slidify", "ramnathv")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(devtools)
library(devtools)
library(devtools)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(devtools)
install.packages("rtools")
library(devtools)
install.packages("devtools")
library(devtools)
install_github('slidifyLibraries', 'ramnathv')
library(devtools)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
install.packages("slidify")
require(devtools)
install.packages("devtools")
install.packages("devtools")
require(devtools)
install.packages("devtools")
require(devtools)
install.packages("C:/Users/pglim/AppData/Local/Temp/RtmpySJgt1/downloaded_packages/devtools_1.9.1.zip", repos = NULL, type = "win.binary")
require(devtools)
install.packages("rtools")
require(devtools)
install.packages("C:/Users/pglim/AppData/Local/Temp/RtmpySJgt1/downloaded_packages/devtools_1.9.1.zip", repos = NULL, type = "win.binary")
require(devtools)
install_github("slidify", "ramnathv")
install_github('ramnathv/slidify')
test
- Bullet 3
- Bullet 1
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
```
date: werew
I expect your to use GitHub/knitr/Rstudio for your homeworks and final project!
install.packages("swirl", repos="http://cran.rstudio.com/", dependencies=TRUE)
install.packages("stringi",type="mac.binary")
rtools
Bioinformatics for Big Omics Data: Introduction to R
require(devtools)
install.packages("devtools")
require(devtools)
rtools()
require(devtools)
install_github("slidify", "ramnathv")
install_github("ramnathv/slidify", "ramnathv")
install.packages("stringi")
install_github("ramnathv/slidify", "ramnathv")
install.packages("stringi")
install_github("ramnathv/slidify", "ramnathv")
install_github("ramnathv/slidifyLibraries", "ramnathv")
library(slidify)
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
runApp(displayMode = 'showcase')
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
runApp(displayMode = 'showcase')
runExample("01_hello")
runExample("01_hello")
runExample("01_hello")
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
library(shinyapps)
shiny::runApp('LPG/IDA/Developing Data Products/shiny')
runExample("01_hello")
runExample("01_hello")
runApp('LPG/IDA/Developing Data Products/shiny')
runApp('LPG/IDA/Developing Data Products/shiny', display.mode = "showcase")
shiny::runApp('LPG/IDA/Developing Data Products/shiny', display.mode = "showcase")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='pglim', token='839F081EABF662B29A5FD65FF509870F', secret='bkpWdxDUldU1rdsSpAh5gBcHu1fVA6IdotGDwEqD')
library(shinyapps)
shiny::runApp('LPG/IDA/Developing Data Products/shiny', display.mode = "showcase")
shiny::runApp('LPG/IDA/Developing Data Products/shiny', display.mode = "showcase")
shinyapps::deployApp('LPG/IDA/Developing Data Products/shiny', display.mode = "showcase")
setwd("~/LPG/IDA/Developing Data Products/demoapp")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
publish(user = "pglim", repo = "https://github.com/pglim/Developing-Data-Products.git")
publish(user = "pglim", repo = "https://github.com/pglim/")
publish(user = "pglim", repo = "https://github.com/pglim/Developing-Data-Products")
publish(user = "pglim", repo = "Repo")
publish(user = "pglim", repo = "https://github.com/pglim/pglim.github.io.git")
publish(user = "pglim", repo = "https://github.com/pglim/pglim.github.io.git")
